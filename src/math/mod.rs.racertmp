use std::ops::{Add, Mul};


pub fn polytope<T: Add<Output=T> + Mul<Output=T> + Copy>(params: &[T], x: T) -> T{
    assert!(params.len() > 1);
    let mut res: T = params[0];
    for i in 0..params.len() - 1{
        let p = params[i + 1];
        res = res * x + p;
    }
    return res;
}



/// poyval generates a polynome function
/// $P(x) = x**n * p_0 + ... + x**1 * p_{n - 1} + p_n$
/// with the parametyer p0, ..., pn
/// # Example
/// ```
/// let p = poly_val!(0.2, 0.3, 0.4, 0.1);
/// let res = p(2.);
/// ```
/// 
macro_rules! poly_val {
    (
        $p0:expr, $( $p_rest:expr),* 
            ) => {
          
        |x: f64| -> f64 {
              
            let mut val = $p0 as f64;
            $(
                val = val * x + $p_rest as f64;
                
                )*;
            val
                  
        };
    };
}
          



#[test]
fn test_polytope(){
    let arr = [1f64, 1f64, 1f64, 1f64];
    arr.
    let res = polytope(&arr, 1f64);
    assert!(res == 4f64);
}

#[test]
fn test_polytope_macro(){
    let p = poly_val!(0.2, 0.3, 0.4, 0.1);
    let x: f64 = 2.0;
    let test_val = 0.2 * x.powf(3.) + 0.3 * x.powf(2.)  + 0.4 * x + 0.1;
    assert!(p(x) == test_val);
}

